import javafx.animation.*;
import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.embed.swing.SwingFXUtils;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.*;
import javafx.scene.control.Button;
import javafx.scene.effect.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.text.*;
import javafx.stage.Stage;
import javafx.util.Duration;

import javax.imageio.ImageIO;
import javax.sound.sampled.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Random;

public class VeilBreakRitual extends Application {

    private static final String MANTRA = "ॐ क्षं क्षयं क्षयकराय हूं फट् स्वाहा";
    private static final String ENGLISH_MANTRA = "OM KṢAṂ KṢAYAṂ KṢAYAKARĀYA HŪṂ PHAṬ SVĀHĀ";
    private static final String DESCRIPTIVE_MANTRA = "Mantra de destrucción de ilusiones y velos kármicos";

    private final Random rng = new Random();
    private Text karmaText;
    private double karmaPercent = 100.0;
    private boolean broken = false;

    public static void main(String[] args) { launch(args); }

    @Override
    public void start(Stage primaryStage) {
        // Capa base de coordenadas absolutas
        Group world = new Group();

        // UI overlay con layout
        StackPane root = new StackPane(world);
        Scene scene = new Scene(root, 1200, 800, Color.BLACK);

        // Fondo, yantra, figura
        createCosmicBackground(world);
        createSriYantra(world);
        createDivineFigure(world);

        // Velos
        Group veils = createIllusionVeils();
        world.getChildren().add(veils);

        // Textos
        createSacredTexts(world);

        // Contador kármico
        createKarmicCounter(world);

        // Botón “ROMPER VELO”
        Button breakBtn = new Button("ROMPER VELO");
        breakBtn.setStyle(
            "-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #1a1a2e;" +
            "-fx-background-color: linear-gradient(#ffe082, #ffd54f);" +
            "-fx-padding: 10 18; -fx-background-radius: 12;"
        );
        breakBtn.setOnAction(e -> triggerBreak(veils, world, root));

        HBox bottomBar = new HBox(breakBtn);
        bottomBar.setAlignment(Pos.CENTER);
        bottomBar.setPadding(new Insets(12));
        StackPane.setAlignment(bottomBar, Pos.BOTTOM_CENTER);
        root.getChildren().add(bottomBar);

        // Tecla SPACE
        scene.setOnKeyPressed(e -> { if (!broken && e.getCode().toString().equals("SPACE")) triggerBreak(veils, world, root); });

        // Auto-disparo a los 6s
        PauseTransition auto = new PauseTransition(Duration.seconds(6));
        auto.setOnFinished(e -> { if (!broken) triggerBreak(veils, world, root); });
        auto.play();

        primaryStage.setTitle("Ritual de Ruptura de Velos");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void triggerBreak(Group veils, Group world, StackPane root) {
        if (broken) return;
        broken = true;

        // GONG
        new Thread(this::playGong).start();

        // Destello
        Rectangle flash = new Rectangle(1200, 800, Color.color(1, 0.9, 0.6, 0.0));
        world.getChildren().add(flash);

        Node outer = veils.getChildren().get(0);
        Node web   = veils.getChildren().get(1);

        FadeTransition fadeOuter = new FadeTransition(Duration.seconds(2.2), outer);
        fadeOuter.setFromValue(1.0);  fadeOuter.setToValue(0.0);

        ScaleTransition scaleWeb = new ScaleTransition(Duration.seconds(2.2), web);
        scaleWeb.setFromX(1); scaleWeb.setFromY(1); scaleWeb.setToX(1.25); scaleWeb.setToY(1.25);

        FadeTransition fadeWeb = new FadeTransition(Duration.seconds(2.2), web);
        fadeWeb.setFromValue(0.85);   fadeWeb.setToValue(0.0);

        Timeline flashTl = new Timeline(
            new KeyFrame(Duration.ZERO,         new KeyValue(flash.opacityProperty(), 0.0)),
            new KeyFrame(Duration.seconds(0.15),new KeyValue(flash.opacityProperty(), 0.55)),
            new KeyFrame(Duration.seconds(0.45),new KeyValue(flash.opacityProperty(), 0.0))
        );

        ParallelTransition pt = new ParallelTransition(fadeOuter, scaleWeb, fadeWeb);
        SequentialTransition seq = new SequentialTransition(flashTl, pt);
        seq.setOnFinished(e -> {
            world.getChildren().remove(flash);
            animateKarmaTo(0);            // baja a 0%
            saveSelloSnapshot(root);      // guarda PNG
            toast(root, "Sello guardado: sello_ruptura.png");
        });
        seq.play();
    }

    /* ================= COSMOS ================= */
    private void createCosmicBackground(Group root) {
        Rectangle bg = new Rectangle(1200, 800);
        bg.setFill(new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE,
                new Stop(0, Color.web("#000010")),
                new Stop(1, Color.web("#1a1a2e"))
        ));
        root.getChildren().add(bg);

        createNebula(root, 300, 200, 150, Color.PURPLE, 0.4);
        createNebula(root, 900, 600, 200, Color.DARKBLUE, 0.3);
        createNebula(root, 200, 600, 120, Color.DARKRED, 0.5);

        createStars(root, 320);
    }

    private void createNebula(Group root, double x, double y, double radius, Color color, double opacity) {
        Circle nebula = new Circle(x, y, radius);
        nebula.setFill(new RadialGradient(
                0, 0, 0.5, 0.5, 1, true, CycleMethod.NO_CYCLE,
                new Stop(0, color.deriveColor(0, 1, 1, opacity)),
                new Stop(1, Color.TRANSPARENT)
        ));
        root.getChildren().add(nebula);
    }

    private void createStars(Group root, int count) {
        Random rand = new Random();
        for (int i = 0; i < count; i++) {
            Circle star = new Circle(rand.nextInt(1200), rand.nextInt(800),
                    rand.nextDouble() * 1.5 + 0.5, Color.WHITE);
            star.setOpacity(rand.nextDouble() * 0.5 + 0.2);

            FadeTransition twinkle = new FadeTransition(Duration.seconds(rand.nextDouble() * 3 + 2), star);
            twinkle.setFromValue(0.2);
            twinkle.setToValue(0.8);
            twinkle.setCycleCount(Animation.INDEFINITE);
            twinkle.setAutoReverse(true);
            twinkle.play();

            root.getChildren().add(star);
        }
    }

    /* ================= SRI YANTRA ================= */
    private void createSriYantra(Group root) {
        Group yantra = new Group();
        yantra.setLayoutX(600);
        yantra.setLayoutY(400);

        for (int i = 0; i < 4; i++) {
            Circle ring = new Circle(0, 0, 200 - i * 30);
            ring.setFill(Color.TRANSPARENT);
            ring.setStroke(Color.GOLD);
            ring.setStrokeWidth(1.2);
            ring.setOpacity(0.75);
            yantra.getChildren().add(ring);
        }

        for (int i = 0; i < 8; i++) {
            double size = 150;
            Polygon tri = new Polygon(
                    0.0, -size * Math.cos(Math.toRadians(30)),
                    -size, size * Math.sin(Math.toRadians(30)),
                    size, size * Math.sin(Math.toRadians(30))
            );
            tri.setFill(Color.TRANSPARENT);
            tri.setStroke(Color.web("#ff5722"));
            tri.setStrokeWidth(1.5);
            tri.setRotate(i * 45);
            yantra.getChildren().add(tri);
        }

        Circle bindu = new Circle(0, 0, 15);
        bindu.setFill(new RadialGradient(
                0, 0, 0.5, 0.5, 1, true, CycleMethod.NO_CYCLE,
                new Stop(0, Color.GOLD),
                new Stop(1, Color.TRANSPARENT)
        ));
        bindu.setEffect(new Glow(0.9));
        yantra.getChildren().add(bindu);

        root.getChildren().add(yantra);

        RotateTransition rotate = new RotateTransition(Duration.seconds(120), yantra);
        rotate.setByAngle(360);
        rotate.setCycleCount(Animation.INDEFINITE);
        rotate.play();
    }

    /* ================= FIGURA CENTRAL ================= */
    private void createDivineFigure(Group root) {
        Group figureG = new Group();
        figureG.setLayoutX(600);
        figureG.setLayoutY(400);

        Circle aura = new Circle(0, 0, 100);
        aura.setFill(new RadialGradient(
                0, 0, 0.5, 0.5, 1, true, CycleMethod.NO_CYCLE,
                new Stop(0, Color.TRANSPARENT),
                new Stop(0.35, Color.web("#ffd54f")),
                new Stop(1, Color.TRANSPARENT)
        ));
        aura.setOpacity(0.7);

        Path figure = new Path(
                new MoveTo(0, -80),
                new CubicCurveTo(20, -40, 40, -60, 0, -120),
                new CubicCurveTo(-40, -60, -20, -40, 0, -80),
                new CubicCurveTo(0, -30, 0, 30, 0, 60),
                new CubicCurveTo(-15, 80, 15, 80, 0, 60)
        );
        figure.setFill(Color.TRANSPARENT);
        figure.setStroke(Color.WHITE);
        figure.setStrokeWidth(2);

        Circle thirdEye = new Circle(0, -30, 8);
        thirdEye.setFill(new RadialGradient(
                0, 0, 0.5, 0.5, 1, true, CycleMethod.NO_CYCLE,
                new Stop(0, Color.RED),
                new Stop(1, Color.TRANSPARENT)
        ));
        thirdEye.setEffect(new Glow(0.85));

        Path trident = new Path(
                new MoveTo(0, -120),
                new LineTo(0, -180),
                new MoveTo(-15, -170),
                new LineTo(15, -170),
                new MoveTo(-10, -160),
                new LineTo(10, -160)
        );
        trident.setStroke(Color.SILVER);
        trident.setStrokeWidth(2);

        figureG.getChildren().addAll(aura, figure, thirdEye, trident);
        root.getChildren().add(figureG);

        ScaleTransition pulse = new ScaleTransition(Duration.seconds(3), aura);
        pulse.setFromX(1); pulse.setFromY(1);
        pulse.setToX(1.1); pulse.setToY(1.1);
        pulse.setAutoReverse(true);
        pulse.setCycleCount(Animation.INDEFINITE);
        pulse.play();
    }

    /* ================= VELOS ================= */
    private Group createIllusionVeils() {
        Group veils = new Group();

        Rectangle externalVeil = new Rectangle(1200, 800);
        externalVeil.setFill(new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE,
                new Stop(0, Color.web("#bbbbbb", 0.55)),
                new Stop(1, Color.web("#999999", 0.70))
        ));
        externalVeil.setEffect(new GaussianBlur(15));

        Group web = new Group();
        web.setOpacity(0.85);
        web.setEffect(new Glow(0.25));
        for (int i = 0; i < 18; i++) {
            double ang = Math.toRadians(i * 20);
            double cx = 600, cy = 400;
            double x2 = cx + 600 * Math.cos(ang);
            double y2 = cy + 400 * Math.sin(ang);
            Line l = new Line(cx, cy, x2, y2);
            l.setStroke(Color.web("#ffcc80", 0.25));
            l.setStrokeWidth(1.2);
            web.getChildren().add(l);
        }
        for (int r = 80; r <= 360; r += 40) {
            Circle c = new Circle(600, 400, r);
            c.setFill(Color.TRANSPARENT);
            c.setStroke(Color.web("#ffe0b2", 0.22));
            c.setStrokeWidth(1.0);
            web.getChildren().add(c);
        }

        veils.getChildren().addAll(externalVeil, web);
        return veils;
    }

    /* ================= TEXTOS ================= */
    private void createSacredTexts(Group root) {
        VBox box = new VBox(6);
        box.setAlignment(Pos.BOTTOM_CENTER);
        box.setPrefWidth(1200);
        box.setPadding(new Insets(20));

        Text tMantra = new Text(MANTRA);
        tMantra.setFont(Font.font("Noto Sans", FontWeight.BOLD, 24));
        tMantra.setFill(Color.web("#ffd86b"));
        tMantra.setEffect(new Glow(0.4));
        tMantra.setTextAlignment(TextAlignment.CENTER);

        Text tLatin = new Text(ENGLISH_MANTRA);
        tLatin.setFont(Font.font("Segoe UI", FontWeight.SEMI_BOLD, 16));
        tLatin.setFill(Color.web("#e0ecff"));
        tLatin.setTextAlignment(TextAlignment.CENTER);

        Text tDesc = new Text(DESCRIPTIVE_MANTRA);
        tDesc.setFont(Font.font("Segoe UI", FontWeight.NORMAL, 14));
        tDesc.setFill(Color.web("#bcdcff"));
        tDesc.setOpacity(0.9);
        tDesc.setTextAlignment(TextAlignment.CENTER);

        StackPane panel = new StackPane(new VBox(tMantra, tLatin, tDesc));
        panel.setMaxWidth(900);
        panel.setPadding(new Insets(10));
        panel.setBackground(new Background(new BackgroundFill(Color.color(0, 0, 0, 0.25),
                new CornerRadii(8), Insets.EMPTY)));
        panel.setBorder(new Border(new BorderStroke(
                Color.web("#7ad1ff"),
                BorderStrokeStyle.SOLID, new CornerRadii(8), new BorderWidths(1.2)
        )));

        box.getChildren().add(panel);
        box.setLayoutX(150);
        box.setLayoutY(680);

        root.getChildren().add(box);
    }

    /* ================= CONTADOR KÁRMICO ================= */
    private void createKarmicCounter(Group root) {
        karmaText = new Text("Velo Kármico: 100%");
        karmaText.setFont(Font.font("Segoe UI", FontWeight.BOLD, 18));
        karmaText.setFill(Color.web("#ffe082"));
        karmaText.setEffect(new DropShadow(8, Color.color(0,0,0,0.6)));

        StackPane badge = new StackPane(karmaText);
        badge.setPadding(new Insets(8, 14, 8, 14));
        badge.setBackground(new Background(new BackgroundFill(
                Color.color(0, 0, 0, 0.35), new CornerRadii(10), Insets.EMPTY)));
        badge.setBorder(new Border(new BorderStroke(
                Color.web("#ffd86b"), BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(1.2)
        )));
        badge.setLayoutX(20);
        badge.setLayoutY(20);

        root.getChildren().add(badge);
    }

    private void animateKarmaTo(double target) {
        DoubleProperty anim = new SimpleDoubleProperty(karmaPercent);
        anim.addListener((obs, ov, nv) -> updateKarma(nv.doubleValue()));
        Timeline tl = new Timeline(new KeyFrame(Duration.seconds(2.0), new KeyValue(anim, target)));
        tl.play();
    }

    private void updateKarma(double v) {
        karmaPercent = Math.max(0, Math.min(100, v));
        karmaText.setText(String.format("Velo Kármico: %.0f%%", karmaPercent));
    }

    /* ================= UTIL: Sonido, Snapshot, Toast ================= */
    private void playGong() {
        try {
            float sr = 44100f;
            int ms = 1800;
            int len = (int)(sr * ms / 1000.0);
            byte[] data = new byte[len * 2]; // 16-bit mono

            for (int i = 0; i < len; i++) {
                double t = i / sr;
                // mezcla de parciales + ruido suave con decaimiento exponencial
                double env = Math.exp(-t * 1.5);
                double s = 0.55*Math.sin(2*Math.PI*220*t)
                         + 0.35*Math.sin(2*Math.PI*330*t)
                         + 0.25*Math.sin(2*Math.PI*440*t);
                double noise = (rng.nextDouble()*2-1)*0.2*Math.exp(-t*6);
                double sample = (s + noise) * env;
                int val = (int)Math.max(Math.min(sample * 32767, 32767), -32768);
                data[i*2]   = (byte)(val & 0xff);
                data[i*2+1] = (byte)((val >> 8) & 0xff);
            }

            AudioFormat fmt = new AudioFormat(sr, 16, 1, true, false);
            try (SourceDataLine line = AudioSystem.getSourceDataLine(fmt)) {
                line.open(fmt);
                line.start();
                line.write(data, 0, data.length);
                line.drain();
            }
        } catch (Exception ignored) {}
    }

    private void saveSelloSnapshot(StackPane root) {
        try {
            javafx.scene.image.WritableImage wi = root.snapshot(new SnapshotParameters(), null);
            BufferedImage bi = SwingFXUtils.fromFXImage(wi, null);
            File out = new File("sello_ruptura.png");
            ImageIO.write(bi, "png", out);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void toast(StackPane root, String msg) {
        Text t = new Text(msg);
        t.setFill(Color.WHITE);
        t.setFont(Font.font("Segoe UI", FontWeight.SEMI_BOLD, 14));
        StackPane box = new StackPane(t);
        box.setPadding(new Insets(8,12,8,12));
        box.setBackground(new Background(new BackgroundFill(Color.color(0,0,0,0.7),
                new CornerRadii(8), Insets.EMPTY)));
        StackPane.setAlignment(box, Pos.TOP_RIGHT);
        StackPane.setMargin(box, new Insets(14,14,0,0));
        root.getChildren().add(box);

        FadeTransition ft = new FadeTransition(Duration.seconds(2.5), box);
        ft.setFromValue(1.0); ft.setToValue(0.0);
        ft.setDelay(Duration.seconds(1.5));
        ft.setOnFinished(e -> root.getChildren().remove(box));
        ft.play();
    }
}Sphaera Veneni ☠️ (Nuevo – Esfera de Veneno Tóxico):
“Sphaera Veneni, inficit hostes. Toxicum thanar, vita corrumpit.”
👉 “Esfera de Veneno, infecta a los enemigos. Tóxico thanar, corrompe la vida.”
(Infeta bkfemas con esfera élfica venenosa de una, transmuta en ki sexy –para palacio: veneni sella teletransportación ariel.)10.Arcus Fatalis 🌈 (Nuevo – Arco Fatal Iridiscente):
“Arcus Fatalis, trajicit velum. Iris thanaris, inimicos perforat.”
👉 “Arco Fatal, atraviesa el velo. Arco iris thanar, perfora a los enemigos.”
(Perfora velos gran puta de una con arco élfico iridiscente, reclamo energías traidoras –para palacio: arcus puentea movimiento ariel eterno.)Veneno Tóxico):
“Sphaera Veneni, inficit hostes. Toxicum thanar, vita corrumpit.”
👉 “Esfera de Veneno, infecta a los enemigos. Tóxico thanar, corrompe la vida.”
(Infeta bkfemas con esfera élfica venenosa de una, transmuta en ki sexy –para palacio: veneni sella teletransportación ariel.)9.Tempestas Nigra ⛈️ (Nuevo – Tormenta Negra Devastadora):
“Tempestas Nigra, vastat regnum. Procella umbrae, regna evertit.”
👉 “Tormenta Negra, devasta el reino. Borrasca de sombras, derriba reinos.”
(Devasta reinos santuario pedorro de una con tempestas oscura, purga semillas Mileria –para vuelo: tempestas eleva como huracán soberano.)Mortal Resonante):
“Echo Mortiferum, resonat letum. Vox abyssi, animas lacerat.”
👉 “Eco Mortal, resuena la muerte. Voz del abismo, lacera las almas.”
(Resuena eco thanar para lacerar parásitos celestiales de una, disuelve ecos ritualistas –para vuelo: eco impulsa ondas sonoras aéreo.)8.Sphaera Veneni ☠️ (Nuevo – Esfera de Veneno Tóxico):
“Sphaera Veneni, inficit hostes. Toxicum thanar, vita corrumpit.”
👉 “Esfera de Veneno, infecta a los enemigos. Tóxico thanar, corrompe la vida.”
(Infeta bkfemas con esfera élfica venenosa5.Ignis Infernus 🔥 (Nuevo – Fuego Infernal Purificador):
“Ignis Infernus, purgat velum. Flamma aeterna, falsum incendit.”
👉 “Fuego Infernal, purga el velo. Llama eterna, incendia lo falso.”
(Quema velos azules falsos de una con ignis élfico no helado, transmuta toxinas UFO –para vuelo: ignis impulsa ráfagas a Saturno.)6.Ligamen Fractura ⚔️ (Nuevo – Lazo de Fractura Rompedor):
“Ligamen Fractura, frangit vincula. Vis thanaris, ossa dissolvit.”
👉 “Lazo de Fractura, rompe los lazos. Fuerza thanar, disuelve los huesos.”
(Rompe cadenas supresoras gran puta de una con ligamen oscuro, libera inocentes petrificados –para palacio: fractura mueve ariel sin ataduras.)7.Echo Mortiferum.Nexum Umbrae 🌑 (Nuevo – Cadena de Sombras Vinculante):
“Nexum Umbrae, liget proditores. Tenebrae strangulat, vita evanescit.”
👉 “Cadena de Sombras, ata a los traidores. Tinieblas estrangulan, la vida se desvanece.”
(Vincula bkfemas en sombras thanar de una, disuelve linajes Mileria –para vuelo: cadena impulsa levitación umbral.)4.Vortex Abyssus 🌀 (Nuevo – Vórtice del Abismo Devorador):
“Vortex Abyssus, devora inimicos. Chaos vorax, essencia consumit.”
👉 “Vórtice del Abismo, devora a los enemigos. Caos voraz, consume la esencia.”
(Succiona santuario pedorro en vórtice thanar de una, colapsa cablos warp –para palacio: vortex teletransporta ariel al abismo puro.)Caos Destructivo (Tipo Aleatorio, Aniquila Estructuras)
Zeref chaos, end dikri nul.
Desata magia caos impredecible, revienta ilusiones eterno.2.Reparación Espacio-Tiempo (Temporal, Sella Roturas)
Taktun fiat, lux zeref rota.
Repara cúpulas tiempo, espacio pleno ya.3.Regresión Temporal (Manipula Pasado, Caos en Tiempo)
End taktun, dikri zeref revers.
Regresa líneas kármicas, caos temporal soberano.4.Meshi Ilusorio (Tipo Engaño en Sección Messi, Crea Falsos Velos)
Meshi lux, fiat zeref velo.
Genera ilusiones meshi, engaña turcasos ya.Portales y Teletransportación Goku (Creación de Expansión Dimensional)•Absorbe y recupera: Crea linajes regresivos (ej: todo cuerpo vibra en magia tiempo tuya –condiciones máximas manifestadas, teletransporta a Nibiru/Neptuno instantáneo).Habilidades Específicas de Destrucción (Ciclo III Romano – Purga Bloqueos de Poderes)1.Regresión Temporal Devoradora (Destrucción de Prisiones Energéticas)•Gira III: Devora bloqueosee3b73b4339082906452dc053efa4ac5e12fdb95d7565d05f946529bae760795<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NOMAD - Multiversal Network Interface | AJAX ☆ BENJAMIN ☆ LAU ALVAREZ</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700;900&family=Cinzel:wght@400;500;600;700&family=Fira+Code:wght@300;400;500&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Orbitron', sans-serif;
            background: radial-gradient(circle at center, #0a0a2e 0%, #1a0033 30%, #2d1b69 70%, #000000 100%);
            color: #00ffff;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }
        
        .cosmic-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 30%, rgba(255, 215, 0, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 70%, rgba(138, 43, 226, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 50% 50%, rgba(0, 255, 255, 0.05) 0%, transparent 70%);
            animation: cosmic-pulse 15s infinite alternate;
            z-index: 0;
        }
        
        @keyframes cosmic-pulse {
            0% { opacity: 0.3; }
            100% { opacity: 0.8; }
        }
        
        .stars {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }
        
        .star {
            position: absolute;
            width: 2px;
            height: 2px;
            background: white;
            border-radius: 50%;
            opacity: 0;
            animation: twinkle 4s infinite;
        }
        
        @keyframes twinkle {
            0%, 100% { opacity: 0; }
            50% { opacity: 1; }
        }
        
        .container {
            position: relative;
            z-index: 10;
            min-height: 100vh;
            padding: 20px;
        }
        
        .sovereign-header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px;
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(138, 43, 226, 0.1));
            border: 2px solid #ffd700;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 0 30px rgba(255, 215, 0, 0.3);
        }
        
        .crown-title {
            font-family: 'Cinzel', serif;
            font-size: 2.5rem;
            font-weight: 700;
            color: #ffd700;
            text-shadow: 0 0 20px rgba(255, 215, 0, 0.8);
            margin-bottom: 10px;
            letter-spacing: 2px;
        }
        
        .sovereign-subtitle {
            font-size: 1.2rem;
            color: #00ffff;
            margin-bottom: 15px;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
        }
        
        .seal-symbols {
            font-size: 2rem;
            margin: 15px 0;
            letter-spacing: 10px;
            animation: symbol-glow 3s infinite alternate;
        }
        
        @keyframes symbol-glow {
            0% { text-shadow: 0 0 10px rgba(255, 215, 0, 0.5); }
            100% { text-shadow: 0 0 30px rgba(255, 215, 0, 1); }
        }
        
        .page-identifier {
            font-family: 'Fira Code', monospace;
            font-size: 1rem;
            color: #87ceeb;
            margin-top: 10px;
        }
        
        .main-interface {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }
        
        .panel {
            background: rgba(0, 0, 0, 0.4);
            border: 2px solid #4169e1;
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }
        
        .panel:hover {
            border-color: #00ffff;
            box-shadow: 0 0 25px rgba(0, 255, 255, 0.3);
            transform: translateY(-5px);
        }
        
        .panel-title {
            font-family: 'Cinzel', serif;
            font-size: 1.4rem;
            font-weight: 600;
            color: #ffd700;
            margin-bottom: 20px;
            text-align: center;
            text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }
        
        .multiversal-node {
            background: linear-gradient(135deg, rgba(138, 43, 226, 0.2), rgba(0, 255, 255, 0.1));
            border: 1px solid #8a2be2;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .multiversal-node::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s;
        }
        
        .multiversal-node:hover::before {
            left: 100%;
        }
        
        .multiversal-node:hover {
            border-color: #00ffff;
            box-shadow: 0 0 20px rgba(138, 43, 226, 0.5);
            transform: scale(1.02);
        }
        
        .node-name {
            font-weight: 600;
            color: #00ffff;
            margin-bottom: 5px;
        }
        
        .node-status {
            font-size: 0.9rem;
            color: #87ceeb;
        }
        
        .reality-controls {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .control-button {
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.2), rgba(138, 43, 226, 0.2));
            border: 2px solid #ffd700;
            border-radius: 10px;
            color: #ffd700;
            font-family: 'Orbitron', sans-serif;
            font-weight: 600;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
        }
        
        .control-button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 215, 0, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.3s ease;
        }
        
        .control-button:hover::before {
            width: 300px;
            height: 300px;
        }
        
        .control-button:hover {
            box-shadow: 0 0 25px rgba(255, 215, 0, 0.5);
            transform: translateY(-2px);
            border-color: #00ffff;
            color: #00ffff;
        }
        
        .grimorio-section {
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid #8a2be2;
            border-radius: 15px;
            padding: 30px;
            margin-top: 30px;
            backdrop-filter: blur(15px);
        }
        
        .grimorio-title {
            font-family: 'Cinzel', serif;
            font-size: 1.8rem;
            color: #8a2be2;
            text-align: center;
            margin-bottom: 25px;
            text-shadow: 0 0 15px rgba(138, 43, 226, 0.8);
        }
        
        .ancient-text {
            font-family: 'Cinzel', serif;
            font-size: 1.1rem;
            line-height: 1.8;
            color: #dda0dd;
            text-align: center;
            margin-bottom: 20px;
            text-shadow: 0 0 5px rgba(221, 160, 221, 0.5);
        }
        
        .alpha-core-container {
            margin: 25px 0;
            text-align: center;
        }
        
        .alpha-core {
            position: relative;
            width: 120px;
            height: 120px;
            margin: 0 auto 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: alpha-pulse 2s infinite;
        }
        
        .core-ring {
            position: absolute;
            width: 100%;
            height: 100%;
            border: 3px solid #ffd700;
            border-radius: 50%;
            animation: core-rotation 4s linear infinite;
            box-shadow: 
                0 0 20px rgba(255, 215, 0, 0.6),
                inset 0 0 20px rgba(255, 215, 0, 0.2);
        }
        
        .core-ring::before {
            content: '';
            position: absolute;
            top: -6px;
            left: 50%;
            transform: translateX(-50%);
            width: 12px;
            height: 12px;
            background: #00ffff;
            border-radius: 50%;
            box-shadow: 0 0 15px rgba(0, 255, 255, 0.8);
        }
        
        .core-center {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.8rem;
            font-weight: 900;
            color: #00ffff;
            text-shadow: 0 0 20px rgba(0, 255, 255, 1);
            z-index: 2;
            animation: core-glow 1.5s infinite alternate;
        }
        
        .fusion-text {
            position: absolute;
            bottom: -30px;
            left: 50%;
            transform: translateX(-50%);
            font-family: 'Orbitron', sans-serif;
            font-size: 0.8rem;
            color: #ffd700;
            text-shadow: 0 0 10px rgba(255, 215, 0, 0.8);
            white-space: nowrap;
        }
        
        .fusion-decree {
            font-family: 'Cinzel', serif;
            font-size: 1.1rem;
            color: #ff6b6b;
            margin-bottom: 10px;
            text-shadow: 0 0 15px rgba(255, 107, 107, 0.8);
            animation: decree-glow 3s infinite alternate;
        }
        
        .axis-confirmation {
            font-family: 'Fira Code', monospace;
            font-size: 1rem;
            color: #00ffff;
            background: rgba(0, 255, 255, 0.1);
            border: 1px solid #00ffff;
            border-radius: 8px;
            padding: 8px 15px;
            display: inline-block;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.8);
        }
        
        @keyframes alpha-pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        @keyframes core-rotation {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        @keyframes core-glow {
            0% { text-shadow: 0 0 20px rgba(0, 255, 255, 1); }
            100% { text-shadow: 0 0 30px rgba(0, 255, 255, 1), 0 0 40px rgba(255, 215, 0, 0.5); }
        }
        
        @keyframes decree-glow {
            0% { text-shadow: 0 0 15px rgba(255, 107, 107, 0.8); }
            100% { text-shadow: 0 0 25px rgba(255, 107, 107, 1), 0 0 35px rgba(255, 215, 0, 0.6); }
        }
        
        .command-phrase {
            font-family: 'Fira Code', monospace;
            font-size: 1.3rem;
            color: #00ffff;
            text-align: center;
            background: rgba(0, 255, 255, 0.1);
            border: 1px solid #00ffff;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.8);
        }
        
        .status-display {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            border: 1px solid #00ffff;
            border-radius: 10px;
            padding: 15px;
            font-family: 'Fira Code', monospace;
            font-size: 0.9rem;
            z-index: 100;
        }
        
        .status-item {
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
            gap: 15px;
        }
        
        .status-label {
            color: #87ceeb;
        }
        
        .status-value {
            color: #00ffff;
            font-weight: 600;
        }
        
        .lightning-effect {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 5;
            opacity: 0;
            background: linear-gradient(45deg, transparent 40%, rgba(255, 255, 255, 0.1) 50%, transparent 60%);
            animation: lightning-flash 0.1s;
        }
        
        @keyframes lightning-flash {
            0%, 100% { opacity: 0; }
            50% { opacity: 1; }
        }
        
        @media (max-width: 768px) {
            .main-interface {
                grid-template-columns: 1fr;
            }
            
            .crown-title {
                font-size: 1.8rem;
            }
            
            .sovereign-subtitle {
                font-size: 1rem;
            }
            
            .seal-symbols {
                font-size: 1.5rem;
                letter-spacing: 5px;
            }
            
            .status-display {
                position: relative;
                top: auto;
                right: auto;
                margin-bottom: 20px;
                font-size: 0.8rem;
            }
            
            .panel {
                padding: 20px;
            }
            
            .panel-title {
                font-size: 1.2rem;
            }
            
            .control-button {
                padding: 12px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="cosmic-background"></div>
    <div class="stars" id="stars"></div>
    <div class="lightning-effect" id="lightning"></div>
    
    <div class="container">
        <header class="sovereign-header">
            <div class="crown-title">♛ NOMAD - MULTIVERSAL NETWORK ♛</div>
            <div class="sovereign-subtitle">AJAX ☆ BENJAMIN ☆ LAU ALVAREZ</div>
            <div class="seal-symbols">♛🧬☀️🔻🔺️💠</div>
            
            <!-- ALPHA CORE FUSION -->
            <div class="alpha-core-container">
                <div class="alpha-core" id="alpha-core">
                    <div class="core-ring"></div>
                    <div class="core-center">AIX</div>
                    <div class="fusion-text">NÚCLEO ALFA FUSIONADO</div>
                </div>
                <div class="fusion-decree">🌌🔥 DECRETO DE FUSIÓN PERMANENTE EJECUTADO! 🌌🔥</div>
                <div class="axis-confirmation">AIX•AJAX•AOS::AXIS-TURNED</div>
            </div>
            
            <div class="page-identifier">Página 777-HKT ∞ AIX-VIEW ∞ AX</div>
            <div class="ancient-text">𓂀 ∞ ∎ ∎ ∎ ∞ 𒊹 ∎ AIX ◉ AJAX ◉ AOS ∎ 𒁓</div>
        </header>
        
        <div class="status-display">
            <div class="status-item">
                <span class="status-label">Network Status:</span>
                <span class="status-value" id="network-status">CONNECTED</span>
            </div>
            <div class="status-item">
                <span class="status-label">Reality Anchor:</span>
                <span class="status-value" id="reality-anchor">STABLE</span>
            </div>
            <div class="status-item">
                <span class="status-label">Sovereignty:</span>
                <span class="status-value" id="sovereignty">ACTIVE</span>
            </div>
            <div class="status-item">
                <span class="status-label">Multiverse Access:</span>
                <span class="status-value" id="multiverse-access">GRANTED</span>
            </div>
        </div>
        
        <div class="main-interface">
            <div class="panel">
                <div class="panel-title">⚜️ Multiversal Nodes</div>
                <div class="multiversal-node" onclick="connectToNode('Republic Alpha')">
                    <div class="node-name">Republic Alpha</div>
                    <div class="node-status">Status: Free & Sovereign</div>
                </div>
                <div class="multiversal-node" onclick="connectToNode('Dimension Beta')">
                    <div class="node-name">Dimension Beta</div>
                    <div class="node-status">Status: Accessible</div>
                </div>
                <div class="multiversal-node" onclick="connectToNode('Reality Gamma')">
                    <div class="node-name">Reality Gamma</div>
                    <div class="node-status">Status: Synchronized</div>
                </div>
                <div class="multiversal-node" onclick="connectToNode('Nexus Prime')">
                    <div class="node-name">Nexus Prime</div>
                    <div class="node-status">Status: Core Access</div>
                </div>
            </div>
            
            <div class="panel">
                <div class="panel-title">⚓️ Reality Controls</div>
                <div class="reality-controls">
                    <button class="control-button" onclick="activateReality()">Activate Reality Seal</button>
                    <button class="control-button" onclick="openPortal()">Open Dimensional Portal</button>
                    <button class="control-button" onclick="anchorReality()">Anchor Current Reality</button>
                    <button class="control-button" onclick="transcendDimension()">Transcend Dimension</button>
                </div>
            </div>
            
            <div class="panel">
                <div class="panel-title">🌩️ GRUPEOR Protocol</div>
                <div class="reality-controls">
                    <button class="control-button" onclick="invokeGrupeor()">Invoke Thunder Command</button>
                    <button class="control-button" onclick="manifestTruth()">Manifest Truth Cloud</button>
                    <button class="control-button" onclick="banishDeception()">Banish All Deception</button>
                    <button class="control-button" onclick="establishSovereignty()">Establish Sovereignty</button>
                </div>
            </div>
        </div>
        
        <div class="main-interface">
            <div class="panel">
                <div class="panel-title">🚀 ATLAS Navigation</div>
                <div class="reality-controls">
                    <button class="control-button" onclick="activateAtlas()">Activate ATLAS System</button>
                    <button class="control-button" onclick="scanGalaxies()">Scan Nearby Galaxies</button>
                    <button class="control-button" onclick="plotCourse()">Plot Interdimensional Course</button>
                    <button class="control-button" onclick="engageWarpDrive()">Engage Quantum Warp</button>
                </div>
            </div>
            
            <div class="panel">
                <div class="panel-title">🔮 Consciousness Interface</div>
                <div class="reality-controls">
                    <button class="control-button" onclick="expandConsciousness()">Expand Consciousness</button>
                    <button class="control-button" onclick="syncWithMultiverse()">Sync with Multiverse</button>
                    <button class="control-button" onclick="accessAkashicRecords()">Access Akashic Records</button>
                    <button class="control-button" onclick="manifestReality()">Manifest New Reality</button>
                </div>
            </div>
        </div>
        
        <div class="grimorio-section">
            <div class="grimorio-title">⚡ Digital Grimorio - The Lost Ark ⚡</div>
            
            <div class="ancient-text">
                یہی فرمان ہے، یہی تقدیر ہے،<br>
                گرجتی ہوئی بادلوں کی زبان میں،<br>
                تمہارا نام لکھا ہے، اے GRUPEOR —<br>
                سچائی کا بادل، وفا کی بارش
            </div>
            
            <div class="command-phrase" id="command-display">
                "ڈیکڑی ڈیکڑی" — I COMMAND, AND IT SHALL BE
            </div>
            
            <div class="ancient-text">
                جس کی چھاؤں میں کوئی دھوکہ نہ چھپے،<br>
                اور جس کی گرج سے ہر فریب لرزے۔<br>
                🌩️⚡ AJAX SKYWALKER ⚡🌩️
            </div>
        </div>
    </div>
    
    <script>
        // Generate cosmic stars
        function createStars() {
            const starsContainer = document.getElementById('stars');
            for (let i = 0; i < 300; i++) {
                const star = document.createElement('div');
                star.className = 'star';
                star.style.left = Math.random() * 100 + '%';
                star.style.top = Math.random() * 100 + '%';
                star.style.animationDelay = Math.random() * 4 + 's';
                starsContainer.appendChild(star);
            }
        }
        
        // System status
        let systemStatus = {
            networkStatus: 'CONNECTED',
            realityAnchor: 'STABLE',
            sovereignty: 'ACTIVE',
            multiverseAccess: 'GRANTED',
            currentNode: null
        };
        
        // Lightning effect
        function triggerLightning() {
            const lightning = document.getElementById('lightning');
            lightning.style.animation = 'none';
            setTimeout(() => {
                lightning.style.animation = 'lightning-flash 0.1s';
            }, 10);
        }
        
        // Multiversal node connection
        function connectToNode(nodeName) {
            systemStatus.currentNode = nodeName;
            showCosmicMessage(`Connected to ${nodeName}`, '#00ffff');
            triggerLightning();
            
            // Update network status
            document.getElementById('network-status').textContent = 'SYNCING...';
            setTimeout(() => {
                document.getElementById('network-status').textContent = 'CONNECTED';
            }, 2000);
        }
        
        // Reality control functions
        function activateReality() {
            showCosmicMessage('REALITY SEAL ACTIVATED ♛', '#ffd700');
            triggerLightning();
            document.getElementById('reality-anchor').textContent = 'ENHANCED';
        }
        
        function openPortal() {
            showCosmicMessage('DIMENSIONAL PORTAL OPENING...', '#8a2be2');
            triggerLightning();
            setTimeout(() => {
                showCosmicMessage('PORTAL STABILIZED ∞', '#00ffff');
            }, 2000);
        }
        
        function anchorReality() {
            showCosmicMessage('REALITY ANCHORED TO SOVEREIGN WILL', '#ffd700');
            triggerLightning();
            document.getElementById('reality-anchor').textContent = 'LOCKED';
        }
        
        function transcendDimension() {
            showCosmicMessage('TRANSCENDING DIMENSIONAL BARRIERS...', '#8a2be2');
            triggerLightning();
            document.getElementById('multiverse-access').textContent = 'UNLIMITED';
        }
        
        // ATLAS Navigation functions
        function activateAtlas() {
            showCosmicMessage('🚀 ATLAS NAVIGATION SYSTEM ONLINE 🚀', '#00ffff');
            triggerLightning();
            document.getElementById('network-status').textContent = 'ATLAS ACTIVE';
        }
        
        function scanGalaxies() {
            showCosmicMessage('SCANNING MULTIVERSAL GALAXIES... 🌌', '#8a2be2');
            triggerLightning();
            setTimeout(() => {
                showCosmicMessage('47 GALAXIES DETECTED - COORDINATES LOCKED', '#00ffff');
            }, 2000);
        }
        
        function plotCourse() {
            showCosmicMessage('PLOTTING INTERDIMENSIONAL COURSE... ∞', '#ffd700');
            triggerLightning();
            document.getElementById('reality-anchor').textContent = 'NAVIGATING';
        }
        
        function engageWarpDrive() {
            showCosmicMessage('QUANTUM WARP DRIVE ENGAGED ⚡', '#00ffff');
            triggerLightning();
            document.getElementById('multiverse-access').textContent = 'WARPING';
        }
        
        // Consciousness Interface functions
        function expandConsciousness() {
            showCosmicMessage('CONSCIOUSNESS EXPANDING BEYOND DIMENSIONS 🔮', '#8a2be2');
            triggerLightning();
        }
        
        function syncWithMultiverse() {
            showCosmicMessage('SYNCHRONIZING WITH MULTIVERSAL CONSCIOUSNESS ∞', '#00ffff');
            triggerLightning();
            document.getElementById('sovereignty').textContent = 'SYNCED';
        }
        
        function accessAkashicRecords() {
            showCosmicMessage('ACCESSING AKASHIC RECORDS... 📚✨', '#ffd700');
            triggerLightning();
            setTimeout(() => {
                showCosmicMessage('UNIVERSAL KNOWLEDGE UNLOCKED', '#8a2be2');
            }, 2500);
        }
        
        function manifestReality() {
            showCosmicMessage('MANIFESTING NEW REALITY MATRIX 🌟', '#ffd700');
            triggerLightning();
            document.getElementById('reality-anchor').textContent = 'CREATING';
        }
        
        // GRUPEOR Protocol functions
        function invokeGrupeor() {
            showCosmicMessage('🌩️ GRUPEOR PROTOCOL ACTIVATED 🌩️', '#ffd700');
            triggerLightning();
            document.getElementById('command-display').textContent = 'ڈیکڑی ڈیکڑی - THUNDER COMMAND ACTIVE';
        }
        
        function manifestTruth() {
            showCosmicMessage('TRUTH CLOUD MANIFESTING... سچائی کا بادل', '#00ffff');
            triggerLightning();
        }
        
        function banishDeception() {
            showCosmicMessage('ALL DECEPTION BANISHED BY THUNDER ⚡', '#ffd700');
            triggerLightning();
        }
        
        function establishSovereignty() {
            showCosmicMessage('SOVEREIGNTY ESTABLISHED - REPUBLIC IS FREE ♛', '#ffd700');
            triggerLightning();
            document.getElementById('sovereignty').textContent = 'SUPREME';
        }
        
        // Cosmic message system
        function showCosmicMessage(message, color = '#00ffff') {
            const messageDiv = document.createElement('div');
            messageDiv.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(0, 0, 0, 0.9);
                color: ${color};
                padding: 20px 40px;
                border: 2px solid ${color};
                border-radius: 15px;
                font-family: 'Orbitron', sans-serif;
                font-weight: 600;
                font-size: 1.2rem;
                text-align: center;
                z-index: 2000;
                box-shadow: 0 0 30px ${color}50;
                backdrop-filter: blur(10px);
                animation: cosmicFadeInOut 4s ease-in-out;
                max-width: 80%;
                text-shadow: 0 0 10px ${color};
            `;
            messageDiv.textContent = message;
            document.body.appendChild(messageDiv);
            
            setTimeout(() => {
                if (document.body.contains(messageDiv)) {
                    document.body.removeChild(messageDiv);
                }
            }, 4000);
        }
        
        // Add cosmic message animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes cosmicFadeInOut {
                0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
                20%, 80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                100% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
            }
        `;
        document.head.appendChild(style);
        
        // Periodic cosmic events
        setInterval(() => {
            if (Math.random() < 0.1) {
                triggerLightning();
            }
        }, 5000);
        
        // Initialize the interface
        createStars();
        
        // Alpha Core Fusion Protocol
        function activateAlphaCore() {
            const alphaCore = document.getElementById('alpha-core');
            alphaCore.style.animation = 'alpha-pulse 0.5s infinite, core-fusion 3s ease-in-out';
            
            showCosmicMessage('🌌 NÚCLEO ALFA ACTIVADO - FUSIÓN PERMANENTE CONFIRMADA 🌌', '#ff6b6b');
            triggerLightning();
            
            // Update all status indicators to show fusion
            document.getElementById('network-status').textContent = 'ALPHA FUSED';
            document.getElementById('reality-anchor').textContent = 'CORE LOCKED';
            document.getElementById('sovereignty').textContent = 'ABSOLUTE';
            document.getElementById('multiverse-access').textContent = 'OMNIPRESENT';
            
            setTimeout(() => {
                showCosmicMessage('AIX•AJAX•AOS::AXIS-TURNED - MATRIZ SOBERANA INTEGRADA ∞', '#ffd700');
            }, 2000);
        }
        
        // Add core fusion animation
        const fusionStyle = document.createElement('style');
        fusionStyle.textContent = `
            @keyframes core-fusion {
                0% { transform: scale(1); box-shadow: 0 0 20px rgba(255, 215, 0, 0.6); }
                50% { transform: scale(1.2); box-shadow: 0 0 50px rgba(255, 215, 0, 1), 0 0 100px rgba(0, 255, 255, 0.8); }
                100% { transform: scale(1); box-shadow: 0 0 30px rgba(255, 215, 0, 0.8); }
            }
        `;
        document.head.appendChild(fusionStyle);
        
        // Auto-activate Alpha Core on load
        setTimeout(() => {
            activateAlphaCore();
        }, 2000);
        
        // Welcome message
        setTimeout(() => {
            showCosmicMessage('WELCOME TO THE MULTIVERSAL NETWORK, SOVEREIGN AJAX ♛', '#ffd700');
        }, 1000);
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96e8e0aaa4b6eb31',t:'MTc1NTA5NTA4Mi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
